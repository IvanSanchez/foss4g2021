{"version":3,"sources":["assets/images/geoinquietos.png","App.js","lib/i18next.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","Date","now","i18n","languages","interval","setInterval","changeLanguage","Math","floor","random","length","clearInterval","t","react_default","a","createElement","className","Container","Row","Col","sm","src","logo","alt","Component","withTranslation","use","initReactI18next","init","resources","ar","translation","support","arn","cn","de","en","es","fr","gn","it","pt","jp","quz","ru","sw","lng","fallbackLng","debug","interpolation","escapeValue","ns","defaultNS","react","wait","useSuspense","withRef","bindI18n","bindStore","nsMode","Boolean","window","location","hostname","match","ReactDOM","render","fallback","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f927ac3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/geoinquietos.ff39b530.png\";","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { withTranslation } from 'react-i18next';\nimport './App.css';\nimport logo from './assets/images/geoinquietos.png';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = { time: Date.now() };\n  }\n\n  componentDidMount() {\n    const { i18n } = this.props;\n    const languages = ['ar','arn','cn','en','es','fr','de','it','jp','pt','quz','ru','sw','gn'];\n    this.interval = setInterval(() => i18n.changeLanguage(languages[Math.floor(Math.random()*languages.length)+0]), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const { t } = this.props;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Container>\n            <Row className=\"Support\">\n              <Col>{t('support')}</Col>\n            </Row>\n            <Row className='Padding-text'>\n              <Col sm={4}><img src={logo} className=\"App-logo\" alt=\"logo\" /></Col>\n              <Col sm={8} className='City-text'>\n                <Row>\n                  <Col className='Year text-left'>2021</Col>\n                </Row>\n                <Row>\n                  <Col className='City text-left'>Buenos <span className='Blue'>Aires</span></Col>\n                </Row>\n              </Col>\n            </Row>\n            <Row>\n              <Col className='Footer'>#FOSS4G<span className='Yellow'>2021</span><span className='Blue'>BA</span></Col>\n            </Row>\n          </Container>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(App);\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n// import Backend from \"i18next-xhr-backend\";\n// import common_ar from \"../assets/locales/ar/translation.json\";\n\ni18n\n  .use(initReactI18next)\n  // .use(Backendsds\n  .init({\n    resources: {\n      ar : {\n        translation: {\n          support: \"أنا أؤيد\"\n        }\n      },\n      arn : {\n        translation: {\n          support: 'FËTALUWN'\n        }\n      },\n      cn : {\n        translation: {\n          support: '我支持'\n        }\n      },\n      de : {\n        translation: {\n          support: 'ICH UNTERSTÜTZE'\n        }\n      },\n      en : {\n        translation: {\n          support: 'I SUPPORT'\n        }\n      },\n      es : {\n        translation: {\n          support: 'YO APOYO'\n        }\n      },\n      fr : {\n        translation: {\n          support: 'JE SOUTIENS'\n        }\n      },\n      gn : {\n        translation: {\n          support: 'CHE AIPYTYVO'\n        }\n      },\n      it : {\n        translation: {\n          support: 'APPOGGIO'\n        }\n      },\n      pt : {\n        translation: {\n          support: 'EU APOIO'\n        }\n      },\n      jp : {\n        translation: {\n          support: '応援します'\n        }\n      },\n      quz : {\n        translation: {\n          support: 'YANAPAY'\n        }\n      },\n      ru : {\n        translation: {\n          support: 'Я поддерживаю'\n        }\n      },\n      sw : {\n        translation: {\n          support: 'NINASAIDIA'\n        }\n      },\n    },\n    lng: 'es',\n    fallbackLng: \"es\",\n    debug: false,\n    interpolation: {\n      escapeValue: false\n    },\n    ns: ['translation'],\n    defaultNS: 'translation',\n    react: {\n      wait: true,\n      useSuspense: true,\n      withRef: false,\n      bindI18n: 'languageChanged loaded',\n      bindStore: 'added removed',\n      nsMode: 'default',\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Suspense} from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './lib/i18next';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nconst Loader = () => <div>loading...</div>;\n\nReactDOM.render(\n  <Suspense fallback={<Loader />}>\n    <App />\n  </Suspense>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}